# user nginx;
# worker_processes auto;

# events {
#     worker_connections 1024;
# }

# http {
#     include /etc/nginx/mime.types;
#     default_type application/octet-stream;
#     server_tokens off;

#     # Redirect HTTP to HTTPS
#     server {
#         listen 80;
#         server_name icit.lazyinwork.com;


#         location /.well-known/acme-challenge/ {
#             root /data/letsencrypt;
#             allow all;
#             autoindex on;
#             default_type "text/plain";
#         }

#         location / {
#             return 301 https://$host$request_uri;
#         }
#     }

#     # HTTPS configuration
#     server {
#         listen 443 ssl;
#         server_name icit.lazyinwork.com;

#         ssl_certificate /etc/letsencrypt/live/icit.lazyinwork.com/fullchain.pem;
#         ssl_certificate_key /etc/letsencrypt/live/icit.lazyinwork.com/privkey.pem;
        
#         location / {
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-Host $host;
#             proxy_set_header X-Forwarded-Proto https;
#             proxy_pass http://frontend:3000/;
#         }

#         location /api/ {
#             proxy_pass http://backend:8000/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#             proxy_set_header Host $host;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto https;

#         }

#         location /s/ {
#             proxy_pass http://websocket-srv:3030/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#             proxy_set_header Host $host;
#         }
#     }
# }







user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    server_tokens off;

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name icit.lazyinwork.com;

        # Handle ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /data/letsencrypt;
            allow all;
            autoindex on;
            default_type "text/plain";
        }

        # Handle CORS preflight requests for /api/
        location /api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Content-Length' 0;
                return 204;
            }
            # Redirect all other HTTP requests to HTTPS
            return 301 https://$host$request_uri;
        }

        # Redirect other HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS configuration
    server {
        listen 443 ssl;
        server_name icit.lazyinwork.com;

        ssl_certificate /etc/letsencrypt/live/icit.lazyinwork.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/icit.lazyinwork.com/privkey.pem;

        # Handle CORS preflight requests for /api/
        location /api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Proxy to backend
            proxy_pass http://backend:8000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto https;

            # Add CORS headers to all responses
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        }

        # Frontend
        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_pass http://frontend:3000/;
        }

        # WebSocket
        location /s/ {
            proxy_pass http://websocket-srv:3030/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
        location /api/notion/ {
      proxy_pass http://notion-backend:4000/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }
    }
}